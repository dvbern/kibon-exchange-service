# Configuration file
# key = value
quarkus.oidc.client-id=kibon-exchange-service
# disable OIDC discovery to make exchange service startup no depend on keycloak
quarkus.oidc.discovery-enabled=false
quarkus.oidc.authorization-path=/
quarkus.oidc.token-path=/protocol/openid-connect/token
quarkus.oidc.jwks-path=/protocol/openid-connect/certs
quarkus.oidc.user-info-path=/protocol/openid-connect/userinfo
quarkus.oidc.introspection-path=/protocol/openid-connect/tokens/introspect

quarkus.datasource.db-kind=postgresql

# in dev mode, apply entity changes directly. We don't care about existing data
# unfortunately, this does not reapply FlyWay migrations
%dev.quarkus.hibernate-orm.database.generation=drop-and-create
%dev.quarkus.hibernate-orm.sql-load-script=import-dev.sql

# use this to incrementally work in your app while keeping data
# useful for rapid dev-check cycles with Quarkus dev mode
%dev-with-data.quarkus.hibernate-orm.database.generation=update
%dev-with-data.quarkus.hibernate-orm.sql-load-script=

# TEST
%test.quarkus.devservices.enabled=false

%test.quarkus.hibernate-orm.database.generation=drop-and-create
%test.quarkus.hibernate-orm.sql-load-script=import-test.sql

# make sure not to modify the schame in prod mode: if needed, integrate FlyWay
%prod.quarkus.hibernate-orm.database.generation=none
%prod.quarkus.hibernate-orm.sql-load-script=no-file

quarkus.hibernate-orm.log.sql=false
quarkus.hibernate-orm.statistics=false

quarkus.http.port=8380
quarkus.http.ssl-port=8443
quarkus.http.root-path=/api/v1

quarkus.http.test-port=8381
quarkus.http.test-ssl-port=8444

# To get HTTPS working, either a key-store-file must be specified, or a certificate provided. See the following options:
# The file path to a server certificate or certificate chain in PEM format.
%prod.quarkus.http.ssl.certificate.file=/cert.pem
# The file path to the corresponding certificate private key file in PEM format.
%prod.quarkus.http.ssl.certificate.key-file=/key.pem
# An optional key store which holds the certificate information instead of specifying separate files.
#quarkus.http.ssl.certificate.key-store-file
# An optional parameter to specify type of the key store file. If not given, the type is automatically detected based on the file name.
#quarkus.http.ssl.certificate.key-store-file-type

# Swagger
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.title=kiBon Exchange Service API
quarkus.health.openapi.included=true

# Kafka URL
kafka.bootstrap.servers=localhost:9092

# Configure the Kafka source (we read from it)
mp.messaging.incoming.InstitutionClientEvents.connector=smallrye-kafka
mp.messaging.incoming.InstitutionClientEvents.auto.offset.reset=earliest
mp.messaging.incoming.InstitutionClientEvents.enable.auto.commit=false
mp.messaging.incoming.InstitutionClientEvents.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.InstitutionClientEvents.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.incoming.InstitutionClientEvents.schema.registry.url=http://schema-registry:8081
%dev.mp.messaging.incoming.InstitutionClientEvents.schema.registry.url=http://localhost:8081
%dev-with-data.mp.messaging.incoming.InstitutionClientEvents.schema.registry.url=http://localhost:8081
mp.messaging.incoming.InstitutionClientEvents.specific.avro.reader=true

mp.messaging.incoming.VerfuegungEvents.connector=smallrye-kafka
mp.messaging.incoming.VerfuegungEvents.auto.offset.reset=earliest
mp.messaging.incoming.VerfuegungEvents.enable.auto.commit=false
mp.messaging.incoming.VerfuegungEvents.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.VerfuegungEvents.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.incoming.VerfuegungEvents.schema.registry.url=http://schema-registry:8081
%dev.mp.messaging.incoming.VerfuegungEvents.schema.registry.url=http://localhost:8081
%dev-with-data.mp.messaging.incoming.VerfuegungEvents.schema.registry.url=http://localhost:8081
mp.messaging.incoming.VerfuegungEvents.specific.avro.reader=true

mp.messaging.incoming.InstitutionEvents.connector=smallrye-kafka
mp.messaging.incoming.InstitutionEvents.auto.offset.reset=earliest
mp.messaging.incoming.InstitutionEvents.enable.auto.commit=false
mp.messaging.incoming.InstitutionEvents.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.InstitutionEvents.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.incoming.InstitutionEvents.schema.registry.url=http://schema-registry:8081
%dev.mp.messaging.incoming.InstitutionEvents.schema.registry.url=http://localhost:8081
%dev-with-data.mp.messaging.incoming.InstitutionEvents.schema.registry.url=http://localhost:8081
mp.messaging.incoming.InstitutionEvents.specific.avro.reader=true

mp.messaging.incoming.BetreuungAnfrageEvents.connector=smallrye-kafka
mp.messaging.incoming.BetreuungAnfrageEvents.auto.offset.reset=earliest
mp.messaging.incoming.BetreuungAnfrageEvents.enable.auto.commit=false
mp.messaging.incoming.BetreuungAnfrageEvents.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.BetreuungAnfrageEvents.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.incoming.BetreuungAnfrageEvents.schema.registry.url=http://schema-registry:8081
%dev.mp.messaging.incoming.BetreuungAnfrageEvents.schema.registry.url=http://localhost:8081
%dev-with-data.mp.messaging.incoming.BetreuungAnfrageEvents.schema.registry.url=http://localhost:8081
mp.messaging.incoming.BetreuungAnfrageEvents.specific.avro.reader=true

mp.messaging.incoming.AnmeldungEvents.connector=smallrye-kafka
mp.messaging.incoming.AnmeldungEvents.auto.offset.reset=earliest
mp.messaging.incoming.AnmeldungEvents.enable.auto.commit=false
mp.messaging.incoming.AnmeldungEvents.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.AnmeldungEvents.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.incoming.AnmeldungEvents.schema.registry.url=http://schema-registry:8081
%dev.mp.messaging.incoming.AnmeldungEvents.schema.registry.url=http://localhost:8081
%dev-with-data.mp.messaging.incoming.AnmeldungEvents.schema.registry.url=http://localhost:8081
mp.messaging.incoming.AnmeldungEvents.specific.avro.reader=true

mp.messaging.outgoing.PlatzbestaetigungBetreuungEvents.connector=smallrye-kafka
# make sure the message is on all Kafka brokers (can impact performance)
mp.messaging.outgoing.PlatzbestaetigungBetreuungEvents.acks=all
# wait, inorder to respond the REST request only after the ACK is received
mp.messaging.outgoing.PlatzbestaetigungBetreuungEvents.waitForWriteCompletion=true
# don't retry indefinitely. When communication to Kafka is currently broken, make the REST request fail immediately.
mp.messaging.outgoing.PlatzbestaetigungBetreuungEvents.retries=0
mp.messaging.outgoing.PlatzbestaetigungBetreuungEvents.delivery.timeout.ms=10000
mp.messaging.outgoing.PlatzbestaetigungBetreuungEvents.request.timeout.ms=10000
mp.messaging.outgoing.PlatzbestaetigungBetreuungEvents.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.PlatzbestaetigungBetreuungEvents.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
mp.messaging.outgoing.PlatzbestaetigungBetreuungEvents.schema.registry.url=http://schema-registry:8081
%dev.mp.messaging.outgoing.PlatzbestaetigungBetreuungEvents.schema.registry.url=http://localhost:8081
%dev-with-data.mp.messaging.outgoing.PlatzbestaetigungBetreuungEvents.schema.registry.url=http://localhost:8081

mp.messaging.outgoing.BetreuungStornierungEvents.connector=smallrye-kafka
# make sure the message is on all Kafka brokers (can impact performance)
mp.messaging.outgoing.BetreuungStornierungEvents.acks=all
# wait, inorder to respond the REST request only after the ACK is received
mp.messaging.outgoing.BetreuungStornierungEvents.waitForWriteCompletion=true
# don't retry indefinitely. When communication to Kafka is currently broken, make the REST request fail immediately.
mp.messaging.outgoing.BetreuungStornierungEvents.retries=0
mp.messaging.outgoing.BetreuungStornierungEvents.delivery.timeout.ms=10000
mp.messaging.outgoing.BetreuungStornierungEvents.request.timeout.ms=10000
mp.messaging.outgoing.BetreuungStornierungEvents.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.BetreuungStornierungEvents.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
mp.messaging.outgoing.BetreuungStornierungEvents.schema.registry.url=http://schema-registry:8081
%dev.mp.messaging.outgoing.BetreuungStornierungEvents.schema.registry.url=http://localhost:8081
%dev-with-data.mp.messaging.outgoing.BetreuungStornierungEvents.schema.registry.url=http://localhost:8081

mp.messaging.outgoing.AnmeldungBestaetigungEvents.connector=smallrye-kafka
mp.messaging.outgoing.AnmeldungBestaetigungEvents.acks=all
mp.messaging.outgoing.AnmeldungBestaetigungEvents.waitForWriteCompletion=true
mp.messaging.outgoing.AnmeldungBestaetigungEvents.retries=0
mp.messaging.outgoing.AnmeldungBestaetigungEvents.delivery.timeout.ms=10000
mp.messaging.outgoing.AnmeldungBestaetigungEvents.request.timeout.ms=10000
mp.messaging.outgoing.AnmeldungBestaetigungEvents.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.AnmeldungBestaetigungEvents.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
mp.messaging.outgoing.AnmeldungBestaetigungEvents.schema.registry.url=http://schema-registry:8081
%dev.mp.messaging.outgoing.AnmeldungBestaetigungEvents.schema.registry.url=http://localhost:8081
%dev-with-data.mp.messaging.outgoing.AnmeldungBestaetigungEvents.schema.registry.url=http://localhost:8081

mp.messaging.outgoing.AnmeldungAblehnenEvents.connector=smallrye-kafka
mp.messaging.outgoing.AnmeldungAblehnenEvents.acks=all
mp.messaging.outgoing.AnmeldungAblehnenEvents.waitForWriteCompletion=true
mp.messaging.outgoing.AnmeldungAblehnenEvents.retries=0
mp.messaging.outgoing.AnmeldungAblehnenEvents.delivery.timeout.ms=10000
mp.messaging.outgoing.AnmeldungAblehnenEvents.request.timeout.ms=10000
mp.messaging.outgoing.AnmeldungAblehnenEvents.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.AnmeldungAblehnenEvents.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
mp.messaging.outgoing.AnmeldungAblehnenEvents.schema.registry.url=http://schema-registry:8081
%dev.mp.messaging.outgoing.AnmeldungAblehnenEvents.schema.registry.url=http://localhost:8081
%dev-with-data.mp.messaging.outgoing.AnmeldungAblehnenEvents.schema.registry.url=http://localhost:8081


quarkus.log.sentry.in-app-packages=ch.dvbern.kibon

# Flyway configuration
quarkus.flyway.migrate-at-start=true
%test.quarkus.flyway.migrate-at-start=false
# when using hibernate drop-and-craete, the database is obviously not empty, thus activate baselien-on-migrate
%dev.quarkus.flyway.baseline-on-migrate=true
%dev.quarkus.flyway.baseline-version=0.0.0
%dev.quarkus.flyway.baseline-description=Initial version
